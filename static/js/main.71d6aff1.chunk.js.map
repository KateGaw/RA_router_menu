{"version":3,"sources":["components/HomePage.js","components/DriftPage.js","components/ForzaPage.js","components/TimeAttackPage.js","components/Menu.js","components/Page404.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","DriftPage","ForzaPage","TimeAttackPage","Menu","exact","to","activeClassName","Page404","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAiBeA,G,MAfE,WACf,OACE,6BAASC,UAAU,WACjB,wBAAIA,UAAU,kBAAd,yFACA,uBAAGA,UAAU,sBAAb,q7CCcSC,EAlBG,WAChB,OACE,6BAASD,UAAU,WACjB,wBAAIA,UAAU,kBAAd,iEACA,uBAAGA,UAAU,sBAAb,u7BAKA,uBAAGA,UAAU,sBAAb,mgCCUSE,EAnBG,WAChB,OACE,6BAASF,UAAU,WACjB,wBAAIA,UAAU,kBAAd,uBACA,uBAAGA,UAAU,sBAAb,yeAIA,uBAAGA,UAAU,sBAAb,4pDCWSG,EAnBQ,WACrB,OACE,6BAASH,UAAU,WACjB,wBAAIA,UAAU,kBAAd,kFACA,uBAAGA,UAAU,sBAAb,03FCiCSI,EApCF,WACX,OACE,yBAAKJ,UAAU,QACb,kBAAC,IAAD,CACEK,OAAK,EACLC,GAAG,IACHN,UAAU,aACVO,gBAAgB,qBAJlB,8CAQA,kBAAC,IAAD,CACED,GAAG,SACHN,UAAU,aACVO,gBAAgB,qBAHlB,iEAOA,kBAAC,IAAD,CACED,GAAG,cACHN,UAAU,aACVO,gBAAgB,qBAHlB,eAOA,kBAAC,IAAD,CACED,GAAG,SACHN,UAAU,aACVO,gBAAgB,qBAHlB,mBCpBSC,EANC,WACd,OACE,yICOW,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,yBAAKT,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIL,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,WCnBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71d6aff1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst HomePage = () => {\n  return (\n    <article className=\"article\">\n      <h1 className=\"article__title\">Гоночн​ое такси</h1>\n      <p className=\"article__paragraph\">\n        Гоночн​ое такси – отличная возможность насладиться скоростью и\n        мастерством гонщика, сидя на месте штурмана, и стать свидетелем\n        настоящего мастерства профессиональных инструкторов Сочи Автодрома, в\n        полной мере ощутив крутые виражи на самой современной гоночной трассе\n        России.\n      </p>\n    </article>\n  );\n};\n\nexport default HomePage;","import React from \"react\";\n\nconst DriftPage = () => {\n  return (\n    <article className=\"article\">\n      <h1 className=\"article__title\">Дрифт-такси</h1>\n      <p className=\"article__paragraph\">\n        Только ​на Сочи Автодроме вас ждет уникальная возможность промчаться по\n        трассе Формулы 1 на максимально возможной скорости в управляемом заносе\n        на легендарной «королеве дрифта» Nissan Silvia!\n      </p>\n      <p className=\"article__paragraph\">\n        Прокатитесь на дрифт-такси с вице-чемпионом Межконтинентального кубка по\n        дрифту под эгидой FIA 2017 года Аркадием Цареградцевым и испытайте на\n        себе, что значат скоростные постановки и эффектные заносы!\n      </p>\n    </article>\n  );\n};\n\nexport default DriftPage;\n","import React from \"react\";\n\nconst ForzaPage = () => {\n  return (\n    <article className=\"article\">\n      <h1 className=\"article__title\">Forza Karting Sochi</h1>\n      <p className=\"article__paragraph\">\n        В Олимпийском парке работает новый открытый развлекательный картинг\n        центр мирового уровня!\n      </p>\n      <p className=\"article__paragraph\">\n        Вас ждут большая, широкая, безопасная трасса и супер современные карты\n        европейского производства c двигателями мощностью 13 л.с. Трасса длинной\n        более 500 метров оборудована системой хронометража, фиксирующей данные\n        заезда в режиме реального времени. По окончании заезда каждый пилот\n        получает распечатку со своими результатами.\n      </p>\n    </article>\n  );\n};\n\nexport default ForzaPage;","import React from \"react\";\n\nconst TimeAttackPage = () => {\n  return (\n    <article className=\"article\">\n      <h1 className=\"article__title\">Гонка ​​​​​​Time Attack</h1>\n      <p className=\"article__paragraph\">\n        Гонка Time Attack создана для тех, кто любит ставить рекорды – открытое\n        соревнование на гражданских автомобилях не предполагает контактной\n        борьбы пилотов во время заезда, но позволит в полной мере ощутить\n        скорость, найти идеальную траекторию и реализовать весь потенциал своего\n        автомобиля. Каждый участник проезжает по Сочи Автодрому определённое\n        количество кругов, а в зачёт идёт только лучшее время одного круга из\n        всех заездов. Для того, чтобы попробовать свои силы на лучшей гоночной\n        трассе страны, Вам понадобится исправный легковой автомобиль на летних\n        шинах и шлем.\n      </p>\n    </article>\n  );\n};\n\nexport default TimeAttackPage;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Menu = () => {\n  return (\n    <nav className=\"menu\">\n      <NavLink\n        exact\n        to=\"/\"\n        className=\"menu__item\"\n        activeClassName=\"menu__item-active\"\n      >\n        Главная\n      </NavLink>\n      <NavLink\n        to=\"/drift\"\n        className=\"menu__item\"\n        activeClassName=\"menu__item-active\"\n      >\n        Дрифт-такси\n      </NavLink>\n      <NavLink\n        to=\"/timeattack\"\n        className=\"menu__item\"\n        activeClassName=\"menu__item-active\"\n      >\n        Time Attack\n      </NavLink>\n      <NavLink\n        to=\"/forza\"\n        className=\"menu__item\"\n        activeClassName=\"menu__item-active\"\n      >\n        Forza Karting\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nconst Page404 = () => {\n  return (\n    <h1>Страница не найдена</h1>\n  );\n};\n\nexport default Page404;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport HomePage from \"./components/HomePage\";\nimport DriftPage from \"./components/DriftPage\";\nimport ForzaPage from \"./components/ForzaPage\";\nimport TimeAttackPage from \"./components/TimeAttackPage\";\nimport Menu from \"./components/Menu\";\nimport Page404 from \"./components/Page404\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Menu />\n        <div className=\"page\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <HomePage />\n            </Route>\n            <Route path=\"/drift\">\n              <DriftPage />\n            </Route>\n            <Route path=\"/timeattack\">\n              <TimeAttackPage />\n            </Route>\n            <Route path=\"/forza\">\n              <ForzaPage />\n            </Route>\n            <Route>\n              <Page404 />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}